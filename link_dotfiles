#!/usr/bin/env ruby

dotfiles_dir = File.dirname(__FILE__)
dotfiles_bin_dir = File.join(dotfiles_dir, 'bin')
home_dir = ENV['HOME']
abort '$HOME not set properly' unless File.exist?(home_dir)
home_bin_dir = File.join(home_dir, 'bin')

{ green: 32, yellow: 33, red: 31 }.each_pair do |color, ansi_code|
  define_method(color) do |text|
    "#{"\033[#{ansi_code}m" if $stdout.tty?}#{text}#{"\033[0m" if $stdout.tty?}"
  end
end

def display(msg, file)
  puts "%-17s %s" % ["#{msg}:", file]
end

def link_it(dotfiles_path, home_path)
  name = File.basename(home_path)
  if !File.exist?(home_path)
    begin
      File.symlink(dotfiles_path, home_path)
      display('Link created', "#{green(name)} -> #{dotfiles_path}")
    rescue
      display('Symlink creation failed', "#{red(name)} -> #{dotfiles_path}")
    end
  elsif File.symlink?(home_path)
    if File.readlink(home_path) == dotfiles_path
      display('Linked properly', "#{green(name)}")
    else
      display('Linked elsewhere', "#{red(name)}")
    end
  else
    display('Regular file', "#{yellow(name)}")
  end
end

puts 'Linking dotfiles...'
Dir.entries(dotfiles_dir).reject { |f| f =~ /^\./ || f == File.basename(__FILE__) || f == 'bin'}.each do |f|
  dotfiles_path = File.expand_path(File.join(dotfiles_dir, f))
  home_path = File.join(home_dir, ".#{f}")
  link_it(dotfiles_path, home_path)
end

puts "\nLinking bin scripts..."
Dir.mkdir(home_bin_dir) unless File.exist?(home_bin_dir)

Dir.entries(dotfiles_bin_dir).reject { |f| f =~ /^\./ }.each do |f|
  dotfiles_path = File.expand_path(File.join(dotfiles_bin_dir, f))
  home_path = File.join(home_bin_dir, f)
  link_it(dotfiles_path, home_path)
end
