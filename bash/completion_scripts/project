#!/usr/bin/env ruby

PROJECT_HOME = '~/projects/'
PROJECT_DIRS = ['personal', 'pro']

module Projects
  def projects; find_projects(PROJECT_DIRS); end
  def project_names; projects.keys; end
  
  def archived_projects; find_projects(PROJECT_DIRS.map {|dir| "#{dir}/ARCHIVE"}); end
  def archived_project_names; archived_projects.keys; end
  
  protected
  
  def find_projects(dirs)
    projs = {}
    dirs.each do |dir|
      
      ind_proj_dir = "#{PROJECT_HOME}#{dir}/"
      `ls #{ind_proj_dir}`.split.each do |name|
        projs[name] = "#{ind_proj_dir}#{name}" unless name == "ARCHIVE"
      end
    end
    projs
  end
end

class ProjectCompletion
  include Projects
  
  def initialize(cmd)
    @cmd = cmd
    @all = @cmd.split.include?('-a') || @cmd.split.include?('--all')
  end
  
  def completions
    all_project_names = @all ? project_names + archived_project_names : project_names
    all_project_names.select do |proj|
      proj[0, typed.length] == typed
    end
  end
  
  def typed
    args = @cmd.split
    args.shift
    args.reject { |str| ['-a','--all'].include?(str) }.last || ''
  end
end

class ProjectLookup
  include Projects
  
  def initialize(project_name)
    @project_name = project_name
  end
  
  def resolve
    # Always look for all projects, but look in archives last
    path = projects[@project_name]
    return path || archived_projects[@project_name]
  end
end

# COMP_LINE will be set for bash
buffer = ENV["COMP_LINE"]
# For zsh we have another script send in the buffer
buffer = ARGV[1] if !buffer && ARGV[0] == '-z'

if buffer
  comps = ProjectCompletion.new(buffer).completions
  puts comps
  exit comps.size > 0 ? 0 : 1
elsif ARGV[0]
  path = ProjectLookup.new(ARGV[0]).resolve
  if path
    puts path
    exit 0
  else
    exit 1
  end
end